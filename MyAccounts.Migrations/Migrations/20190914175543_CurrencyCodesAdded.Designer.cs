// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyAccounts.Context;

namespace MyAccounts.Migrations.Migrations
{
    [DbContext(typeof(MyAccountsDbContext))]
    [Migration("20190914175543_CurrencyCodesAdded")]
    partial class CurrencyCodesAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyAccounts.Core.Accounts.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<bool>("InBalance");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPassive");

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("MyAccounts.Core.Accounts.AccountSubconto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<int>("SubcontoTypeId");

                    b.Property<int>("SubcontoValue");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("SubcontoTypeId");

                    b.ToTable("AccountSubcontos");
                });

            modelBuilder.Entity("MyAccounts.Core.Accounts.EconomicOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("DisplayLabel");

                    b.HasKey("Id");

                    b.ToTable("EconomicOperations");
                });

            modelBuilder.Entity("MyAccounts.Core.Accounts.Movement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountKt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DebetAccountId");

                    b.Property<int>("EconomicOperationId");

                    b.Property<int>("KreditAccountId");

                    b.Property<decimal?>("QuantityDt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("QuantityKt")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DebetAccountId");

                    b.HasIndex("EconomicOperationId");

                    b.HasIndex("KreditAccountId");

                    b.ToTable("Movements");
                });

            modelBuilder.Entity("MyAccounts.Core.Accounts.SubcontoType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SubcontoTypes");
                });

            modelBuilder.Entity("MyAccounts.Core.ApplicationUser.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password");

                    b.Property<string>("PasswordSalt");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("MyAccounts.Core.Currencies.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(3);

                    b.Property<string>("Name");

                    b.Property<string>("ShortCode");

                    b.Property<string>("Symbol");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("MyAccounts.Core.Currencies.CurrencyRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Koef");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CurrencyRates");
                });

            modelBuilder.Entity("MyAccounts.Core.Accounts.Account", b =>
                {
                    b.HasOne("MyAccounts.Core.Accounts.Account", "Parent")
                        .WithMany("SubAccounts")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("MyAccounts.Core.Accounts.AccountSubconto", b =>
                {
                    b.HasOne("MyAccounts.Core.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAccounts.Core.Accounts.SubcontoType", "SubcontoType")
                        .WithMany()
                        .HasForeignKey("SubcontoTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAccounts.Core.Accounts.Movement", b =>
                {
                    b.HasOne("MyAccounts.Core.Accounts.Account", "DebetAccount")
                        .WithMany()
                        .HasForeignKey("DebetAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MyAccounts.Core.Accounts.EconomicOperation", "EconomicOperation")
                        .WithMany("Movements")
                        .HasForeignKey("EconomicOperationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAccounts.Core.Accounts.Account", "KreditAccount")
                        .WithMany()
                        .HasForeignKey("KreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MyAccounts.Core.Currencies.CurrencyRate", b =>
                {
                    b.HasOne("MyAccounts.Core.Currencies.Currency", "Currency")
                        .WithMany("Rates")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
